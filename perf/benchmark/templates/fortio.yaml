{{- define "rbac" }}
{{- $ruleName := (randAlpha 16) | lower }}
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRole
metadata:
  name: {{ $ruleName }}
spec:
  rules:
  - services: ["{{ $.name }}.*"]
    methods: ["*"]
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: ServiceRoleBinding
metadata:
  name: {{ $ruleName }}
spec:
  subjects:
  - user: "{{ $.userName }}"
  roleRef:
    kind: ServiceRole
    name: "{{ $ruleName }}"
{{- end }}

{{- define "fortio" }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.name }}
spec:
  ports:
  - name: http-echo
    port: 8080
    protocol: TCP
  - name: grpc-ping
    port: 8079
    protocol: TCP
  - name: http-echoa
    port: 8078
    protocol: TCP
  - name: grpc-pinga
    port: 8077
    protocol: TCP
  selector:
    app: {{ $.name }}
{{- if $.V.expose }}
  type: LoadBalancer
{{- end }}
---
{{- if $.V.inject }}
{{- if $.Values.rbac.enabled }}
{{- range $i, $e := until ($.Values.rbac.numPolicies|int) }}
{{- $data := dict "name" $.name "Values" $.Values "userName" (randAlpha 16) }}
{{- template "rbac" $data }}
---
{{- end }}
{{- $data := dict "name" .name "Values" .Values "ruleName" (randAlphaNum 16) "userName" "*" }}
  {{- template "rbac" $data }}
---
apiVersion: "rbac.istio.io/v1alpha1"
kind: RbacConfig
metadata:
  name: default
spec:
  mode: 'ON'
---
{{- end }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: nighthawk-test-server-config
data:
  nighthawk-test-server.yaml: |
    admin:
      access_log_path: /var/lib/fortio/nighthawk_test_server_admin_access_captured.log
      profile_path: /var/lib/fortio/nighthawk_test_server_captured.prof
      address:
        socket_address: { address: 0.0.0.0, port_value: 9080 }
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              generate_request_id: false
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service
                  domains:
                  - "*"
              http_filters:
              - name: envoy.fault
                config:
                  max_active_faults: 100
                  delay:
                    header_delay: {}
                    percentage:
                      numerator: 100
              - name: test-server
                config:
                  response_body_size: 1024
                  response_headers:
                  - { header: { key: "x-nighthawk", value: "captured"}}
              - name: envoy.router
                config:
                  dynamic_stats: false
  nighthawk-test-server-uncaptured.yaml: |
    admin:
      access_log_path: /var/lib/fortio/nighthawk_test_server_admin_access_uncaptured.log
      profile_path: /var/lib/fortio/nighthawk_test_server_uncaptured.prof
      address:
        socket_address: { address: 0.0.0.0, port_value: 9078 }
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 8078
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              generate_request_id: false
              codec_type: auto
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service
                  domains:
                  - "*"
              http_filters:
              - name: envoy.fault
                config:
                  max_active_faults: 100
                  delay:
                    header_delay: {}
                    percentage:
                      numerator: 100
              - name: test-server
                config:
                  response_body_size: 1024
                  response_headers:
                  - { header: { key: "x-nighthawk", value: "uncaptured"}}
              - name: envoy.router
                config:
                  dynamic_stats: false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ $.name }}
  name: {{ $.name }}
spec:
  selector:
    matchLabels:
      app: {{ $.name }}
  template:
    metadata:
      annotations:
        {{- if $.Values.interceptionMode }}
        sidecar.istio.io/interceptionMode: {{ $.Values.interceptionMode }}
        {{- end }}
        {{- if $.Values.excludeOutboundIPRanges }}
        traffic.sidecar.istio.io/excludeOutboundIPRanges: {{ $.Values.excludeOutboundIPRanges }}
        {{- end }}
        {{- if $.Values.includeOutboundIPRanges }}
        traffic.sidecar.istio.io/includeOutboundIPRanges: {{ $.Values.includeOutboundIPRanges }}
        {{- end }}
        sidecar.istio.io/inject: "{{ $.V.inject }}"
        linkerd.io/inject: "{{ $.V.injectL }}"
{{- if eq $.V.injectL "enabled" }}
        config.linkerd.io/skip-outbound-ports: "8077" 
        config.linkerd.io/skip-inbound-ports: "8077"
{{- end }}
        # exclude inbound ports of the uncaptured container
        traffic.sidecar.istio.io/excludeInboundPorts: "8076,8077,8078"
        sidecar.istio.io/proxyCPU: {{ $.Values.proxy.cpu }}
        sidecar.istio.io/proxyMemory: {{ $.Values.proxy.memory }}
      labels:
        app: {{ $.name }}
    spec:
#      affinity:
#        podAntiAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#          - labelSelector:
#              matchExpressions:
#              - key: app
#                operator: In
#                values: 
#{{- if eq $.name "fortioclient" }}
#                - "fortioserver"
#{{- else }}
#                - "fortioclient"
#{{- end }}
#            topologyKey: "kubernetes.io/hostname"
      volumes:
      - name: shared-data
        emptyDir: {}
      - name: nighthawk-test-server-config
        configMap:
          name: nighthawk-test-server-config
      containers:
      - name: captured
        securityContext:
          runAsUser: 1
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        image: {{ $.Values.fortioImage }}
{{- if eq $.name "fortioclient" }}
        args:
        - report
{{- else }}
        image: {{ $.Values.nighthawkImage }}
        args:
        - nighthawk_test_server
        - -c
        - /var/lib/nighthawk/nighthawk-test-server.yaml
        - --base-id
        - "1"
{{- end }}
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8079
          protocol: TCP
        resources:
{{- if $.Values.appresources1 }}
{{ toYaml $.Values.appresources1 | indent 10 }}
{{- end }}
      - name: shell
        securityContext:
          runAsUser: 1
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        image: {{ $.Values.curlImage }}
        args:
        - /bin/sleep
        - infinity
      - name: uncaptured
        securityContext:
          runAsUser: 1
{{- if eq $.name "fortioclient" }}
        image: {{ $.Values.fortioImage }}
        args:
        - report
        - -http-port
        - "8077"
        - -grpc-port
        - "8076"
        - -redirect-port
        - "8078"
{{- else }}
        image: {{ $.Values.nighthawkImage }}
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/fortio
        - name: nighthawk-test-server-config
          mountPath: /var/lib/nighthawk 
        args:
        - nighthawk_test_server
        - -c
        - /var/lib/nighthawk/nighthawk-test-server-uncaptured.yaml
        - --base-id
        - "2"
{{- end }}
        resources:
{{- if $.Values.appresources1 }}
{{ toYaml $.Values.appresources1 | indent 10 }}
{{- end }}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: {{ $.name }}
spec:
  hosts:
  - {{ $.name }}.{{ $.Values.domain }}
  gateways:
  - {{ $.Values.gateway }}
  http:
  - route:
    - destination:
        host: {{ $.name }}
        port:
          number: 8080
{{- end }}

{{- $fortioserver := dict "name" "fortioserver" "Values" .Values "V" .Values.server}}
{{- template "fortio" $fortioserver }}
{{- $fortioclient := dict "name" "fortioclient" "Values" .Values "V" .Values.client }}
{{- template "fortio" $fortioclient }}

---
{{- if or $.Values.server.inject $.Values.client.inject }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: {{ .Values.gateway }}
spec:
  selector:
    istio: ingressgateway
  servers:
  - hosts:
    - fortioserver.{{ .Values.domain }}
    - fortioclient.{{ .Values.domain }}
    port:
      name: http
      number: 80
      protocol: HTTP
  - hosts:
    - '*'
    port:
      name: https-fortio
      number: 443
      protocol: HTTPS
    tls:
      mode: SIMPLE
      privateKey: /etc/istio/ingressgateway-certs/tls.key
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
---
{{- end }}
{{- if $.Values.cert }}
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: fortio-two-pod
  namespace: istio-system
spec:
  secretName: istio-ingressgateway-certs-fortio-twopod
  issuerRef:
    name: letsencrypt
    kind: ClusterIssuer
  commonName: fortioclient.{{ .Values.domain }}
  dnsNames:
  - fortioclient.{{ .Values.domain }}
  acme:
    config:
    - http01:
        ingressClass: istio
      domains:
      - fortiotls.{{ .Values.domain }}
      - fortioclient.{{ .Values.domain }}
{{- end }}
